#!/usr/bin/env bash

set -ex

if [[ ${ROS_DISTRO} = "dashing" ]]
then
	./run_ros2_integration_test.sh
	exit 0
fi

# Clean up
rm -rf integration/v1_bundle
rm -rf integration/v2_bundle
rm -rf integration/v1.tar.gz
rm -rf integration/v2.tar

# Preparing dependencies generated by tox to requirements.txt for docker use
pip freeze > requirements.txt
# Remove colcon-bundle because we are going to install it as editable
sed -i.old '/^colcon-bundle.*/d' requirements.txt
# Build bundles

if [[ ${TEST} = "create" ]]
then
	docker build -f Dockerfile.${ROS_DISTRO} -t test-container .
else
	docker build -f Dockerfile.backwards -t test-container .
fi

# Copy bundles into local directory
docker run -v=$(pwd):/workspace test-container /workspace/integration/copy-bundles.sh

cd integration

# Extract bundles
rm -rf ./v2_bundle
mkdir ./v2_bundle

mkdir ./v2_bundle/dependencies
tar -xOf ./v2.tar dependencies.tar.gz | tar -xzf - --directory ./v2_bundle/dependencies

mkdir ./v2_bundle/workspace
tar -xOf ./v2.tar workspace.tar.gz | tar -xzf - --directory ./v2_bundle/workspace

rm -rf ./v1_bundle
mkdir ./v1_bundle

tar -xzOf ./v1.tar.gz bundle.tar | tar -xf - --directory ./v1_bundle

# Run tests
if [[ ${ROS_DISTRO} = "kinetic" ]]
then
	docker run -v $(pwd):/workspace ubuntu:xenial /workspace/test_v1.sh
	docker run -v $(pwd):/workspace ubuntu:xenial /workspace/test_v2.sh
	docker run -v $(pwd):/workspace ubuntu:xenial /workspace/test_v2.bash
else
	docker run -v $(pwd):/workspace ubuntu:bionic /workspace/test_v1.sh
	docker run -v $(pwd):/workspace ubuntu:bionic /workspace/test_v2.sh
	docker run -v $(pwd):/workspace ubuntu:bionic /workspace/test_v2.bash
fi

